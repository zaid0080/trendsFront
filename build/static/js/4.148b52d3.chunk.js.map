{"version":3,"sources":["components/Hashtag/Trending.js","components/Hashtag/GeoChart.js","components/Hashtag/Hashtag.js"],"names":["Trending","useContext","GlobalContext","city","country","setData","setTime","darkMode","setPlaceError","useState","sessionData","window","sessionStorage","getItem","query","undefined","fetchAndSetData","d","JSON","parse","className","trends","filter","i","map","to","encodeURIComponent","name","index","GeoChart","mapData","toShow","getCode","value","trend","tweet_volume","color","size","data","backgroundColor","borderColor","tooltipBgColor","styleFunction","context","opacityLevel","countryValue","minValue","maxValue","toret","fill","fillOpacity","stroke","strokeWidth","strokeOpacity","tooltipTextFunction","countryName","isoCode","Number","toString","fetchTrendData","tag","setTrendDetail","setFetchError","a","fetch","headers","method","body","stringify","response","ok","json","console","log","Hashtag","decodeURIComponent","parseTag","useParams","hashtag","selectedPlace","fetchError","place","setPlace","trendingLocations","trendDetail","useLayoutEffect","filterCity","useEffect","length","Helmet","content","property","t","onChange","e","target","selected","href","rel","changetoK","Page404"],"mappings":"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","file":"static/js/4.148b52d3.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { GlobalContext } from \"../../global\";\nimport { fetchAndSetData } from \"../Content/Content\";\nimport { Link } from \"react-router-dom\";\n\nfunction Trending() {\n  const { city, country, setData, setTime, darkMode } = useContext(GlobalContext);\n  const setPlaceError = useState(null)[1];\n  \n  let sessionData = window.sessionStorage.getItem(\"data\");\n  if (sessionData === null) {\n    const query = city === undefined ? country : city;\n    fetchAndSetData(query, setData, setTime,setPlaceError);\n    sessionData = window.sessionStorage.getItem(\"data\");\n  }\n  const d = JSON.parse(sessionData);\n  if (d) {\n    return (\n      <>\n        <p className=\"tt-tag\">Trending Now</p>\n        <ul className=\"tt-trends\">\n          {d[0].trends\n            .filter((d, i) => i < 10)\n            .map((d) => (\n              <li key={d.index} className={darkMode ? 'dark-hash' : 'light-list'}>\n                <Link\n                  to={`/${country}${\n                    city === undefined ? \"\" : \"/\" + city\n                  }/trend/${window.encodeURIComponent(d.name)}`}\n                >\n                  {d.name}\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default Trending;\n","import React, {useContext} from \"react\";\nimport { WorldMap } from \"react-svg-worldmap\";\nimport { getCode } from \"country-list\";\nimport { GlobalContext } from \"../../global\";\n\nfunction GeoChart(mapData) {\n  const {darkMode} = useContext(GlobalContext)\n  if (mapData) {\n    const countryCode = mapData.mapData.filter(\n      (d) => getCode(d.name) !== undefined\n    );\n    var toShow = countryCode.map((d) => {\n      const country = getCode(d.name);\n      const value = d.trend.tweet_volume + 1;\n      return { country, value };\n    });\n  }\n\n  const toolTipFuntion = (countryName, isoCode, value) => {\n    let ret;\n    if(Number(value) === 1) {\n      ret= countryName.toString();\n    } else {\n      ret = countryName +' : ' + value;\n    }\n    return ret;\n  }\n\n  const stylingFunction = (context ) => {\n    const opacityLevel = 0.5 + (1.5 * (context.countryValue - context.minValue) / (2*context.maxValue - context.minValue))\n    const toret = {\n        // fill: context.country === \"US\" ? \"blue\" : context.color, \n        fill: darkMode ? 'yellow' : '#017acd',\n        fillOpacity: opacityLevel, \n        stroke: 'black', \n        strokeWidth: 0,\n        strokeOpacity: 1.5, \n    }\n    if(context.countryValue === 1){\n      toret.fill = \"#c0c0c0\";\n      return toret;\n    }\n    return toret;\n}\n  return (\n    <div className=\"App\">\n      <WorldMap\n        color=\"red\"\n        size=\"md\"\n        data={toShow}\n        backgroundColor={darkMode ? '#172037' : '#fff'}\n        borderColor= {darkMode ? '#fff' : '#000'}\n        tooltipBgColor=\"#017acd\"\n        styleFunction={stylingFunction}\n        tooltipTextFunction={toolTipFuntion}\n      />\n    </div>\n  );\n}\n\nexport default GeoChart;\n","import { useEffect, useState, useContext, useLayoutEffect } from \"react\";\nimport Helmet from \"react-helmet\";\nimport { useParams } from \"react-router\";\nimport { GlobalContext } from \"../../global\";\nimport \"./hashtag.css\";\nimport { HashLoader } from \"react-spinners\";\nimport Trending from \"./Trending\";\nimport GeoChart from \"./GeoChart\";\nimport Page404 from \"../404Page/Page404.js\";\nimport { changetoK } from \"../Content/Tweet\";\n\nfunction parseTag(tag) {\n  tag = window.decodeURIComponent(tag);\n  return tag;\n}\n\nconst fetchTrendData = async (tag, setTrendDetail, setFetchError) => {\n  try {\n    const response = await fetch(\n      \"https://trendsend.herokuapp.com/apis/trends/trend-details\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({ trend: tag }),\n      }\n    );\n    if (response.ok) {\n      const data = await response.json();\n      setTrendDetail(data.data);\n      setFetchError(null);\n    } else {\n      console.log(response);\n      throw response;\n    }\n  } catch (error) {\n    console.log(error);\n    setFetchError(error);\n  }\n};\n\nconst Hashtag = () => {\n  let params = useParams();\n  let tag = parseTag(params.hashtag);\n  const { city, country,darkMode } = useContext(GlobalContext);\n  const selectedPlace = city === undefined ? country : city;\n  const [fetchError, setFetchError] = useState(null);\n  const [place, setPlace] = useState(selectedPlace);\n\n  const [trendDetail, setTrendDetail] = useState({ trendingLocations: [] });\n\n  useLayoutEffect(() => {\n    setPlace(place);\n  }, [place]);\n\n  const countryHandler = (e) => {\n    setPlace(e.target.value);\n  };\n  const filterCity = trendDetail.trendingLocations.filter(\n    (d) => d.name === place\n  );\n\n  useEffect(() => {\n    fetchTrendData(tag, setTrendDetail, setFetchError);\n  }, [tag, place]);\n\n  if (fetchError === null) {\n    if (trendDetail.trendingLocations.length >= 1) {\n      return (\n        <div className={`hashtag ${darkMode ? 'dark' : 'light-hash'}`}>\n          <Helmet>\n              <meta\n                name=\"description\"\n                content={`Find details about Current Top Twitter trending hashtags and Topics on Twitter in ${country} ${city}.`}\n              />\n              <meta\n                name=\"title\"\n                content={`Current Twitter Trend and Hashtag Name is ${tag}`}\n              />\n             <meta name=\"twitter:site\" content=\"@alldaytrends1\" />\n              <meta property=\"og:type\" content=\"website\" />\n              <meta property=\"og:url\" content=\"https://alldaytrends.com/\" />\n              <meta property=\"og:site_name\" content=\"alldaytrends\" />\n              <meta\n                property=\"og:title\"\n                content={`Current Twitter Hashtag Name is ${tag}`}\n              />\n              <meta\n                property=\"og:description\"\n                content={`Find details about Top trending hashtags on Twitter in ${country} ${city}.`}\n              />\n              <meta property=\"og:image\" content=\"%PUBLIC_URL%/logo.png\" />\n\n              <meta property=\"twitter:card\" content=\"summary_large_image\" />\n              <meta\n                property=\"twitter:url\"\n                content=\"https://alldaytrends.com/\"\n              />\n              <meta\n                property=\"twitter:title\"\n                content={`Twitter trends ${trendDetail.trendingLocations.length} locations`}\n              />\n              <meta\n                property=\"twitter:description\"\n                content={`Twitter trends ${trendDetail.trendingLocations.map(t => t.name)}`}\n              />\n              <meta property=\"twitter:image\" content=\"%PUBLIC_URL%/logo.png\" />\n            <title>{tag} 🕊️ {city === undefined ? country : city + ', ' + country} 🕊️ Twitter Trends</title>\n          </Helmet>\n          <div className={`hashtag-box ${darkMode ? 'dark-hash' : ''}`}>\n            <div>\n              <h2 className=\"hash-line\">\n                Trending at\n                <span className=\"hash-index\">\n                  #{filterCity[0]?.trend?.index}\n                </span>\n                in\n                <select className=\"country-drop\" onChange={countryHandler}>\n                  {trendDetail.trendingLocations.map((t) => {\n                      return (\n                        <option selected={place === t.name} key={t.name}>\n                          {t.name}\n                        </option>\n                      );\n                  })}{\" \"}\n                </select>\n              </h2>\n              <div>\n                <a\n                  className=\"hashtag-name\"\n                  href={`https://twitter.com/search?q=${window.encodeURIComponent(\n                    tag\n                  )}&src=typed_query`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {tag}\n                </a>\n              </div>\n              <div className=\"details\">\n                <div>\n                  <span className=\"details-1\">\n                    {filterCity[0]?.trend?.tweet_volume === 0\n                      ? \"N.A\"\n                      : changetoK(filterCity[0]?.trend?.tweet_volume)}\n                  </span>\n                  No. of Tweets\n                </div>\n                <div>\n                  <span className=\"details-1\">\n                    #{filterCity[0]?.trend?.index}\n                  </span>\n                  Highest Rank\n                </div>\n              </div>\n              <div className=\"tweet-location\">\n                <p>\n                  Tweeted in\n                  <span>{trendDetail.trendingLocations.length}</span>\n                  other locations.\n                </p>\n              </div>\n              <div>\n                {\" \"}\n                <GeoChart mapData={trendDetail.trendingLocations} />{\" \"}\n              </div>\n            </div>\n          </div>\n          <div className={`top-tweets-box ${darkMode ? 'dark-nav' : 'light-hash'}`}>\n            <Trending />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={`hashtag ${darkMode ? 'dark' : 'light-hash'}`}>\n          <div className=\"hash-loader\">\n            <HashLoader color=\"#017acd\" />\n          </div>\n        </div>\n      );\n    }\n  } else {\n    return <Page404 />;\n  }\n};\nexport default Hashtag;\n"],"sourceRoot":""}